{
  "name": "com.unity.xr.arfoundation",
  "displayName": "AR Foundation",
  "version": "5.0.0-pre.12",
  "unity": "2021.2",
  "description": "A collection of Subsystems as well as MonoBehaviours and C# utilities for working with the Subsystems. \n\nIncludes: \n▪ Definitions of Subsystems \n▪ GameObject menu items for creating an AR setup \n▪ MonoBehaviours that control AR session lifecycle and create GameObjects from detected, real-world trackable features \n▪ Scale handling \n▪ Face tracking\n\nSamples available at https://github.com/Unity-Technologies/arfoundation-samples",
  "keywords": [
    "xr",
    "ar",
    "augmented",
    "reality",
    "utility",
    "utilities",
    "foundation",
    "core",
    "subsystem",
    "xreditorsubsystem",
    "arsimulation"
  ],
  "dependencies": {
    "com.unity.inputsystem": "1.3.0",
    "com.unity.xr.core-utils": "2.1.0-pre.1",
    "com.unity.xr.management": "4.0.1",
    "com.unity.ugui": "1.0.0",
    "com.unity.mathematics": "1.2.5",
    "com.unity.modules.particlesystem": "1.0.0",
    "com.unity.modules.ui": "1.0.0",
    "com.unity.modules.unityanalytics": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0"
  },
  "_upm": {
    "changelog": "### Added\n\n- Added automatic refresh of AR environment list upon importing or deleting a prefab with the `SimulationEnvironment` component.\n- Added analytics to anonymously collect usage data of some AR Foundation features. These analytics are captured only in the Unity Editor and not added to the player builds. See [Unity manual on Editor Analytics](https://docs.unity3d.com/Manual/EditorAnalytics.html) for more details.\n- Added support for changing the Camera Background rendering order so that the background can be rendered either `BeforeOpaques` or `AfterOpaques` by setting the `ARCameraManager.requestedRenderingMode` in the editor or at runtime and then checking `ARCameraManager.currentRenderingMode` at runtime for the real rendering mode. See [migration guide](xref:arfoundation-migration-guide-5-x) for more information.\n- Added support for changing the Camera Background rendering order in simulation so that the background can be rendered either `BeforeOpaques` or `AfterOpaques` by setting the `SimulationCameraSubsystem.requestedRenderingMode`.\n- Added support for the following subsystems in simulation.\n  - Point cloud subsystem\n  - Plane subsystem\n  - Image tracking subsystem\n  - Raycast subystem\n  - Mesh subsystem\n  - Camera subsystem\n- Added AR Environment Toolbar Overlay for Scene view. The toolbar supports selecting the active Simulation environment, installing sample Simulation environments, refreshing the list of environments, creating a new environment, duplicating the active environment, and opening the active environment for editing.\n- AR Environment Toolbar Overlay will change the Scene View to an AR Environment View, where you can preview the environment that will be used for Simulation.\n- Added manager to enable X-Ray visualization of simulation environments and options to the Simulation Runtime Settings for enabling or disabling the X-Ray Visuals.\n- Added a **GameObject** &gt; **XR** &gt; **XR Origin (Mobile AR)** menu item, giving users a one-click option to create an [XR Origin](xref:Unity.XR.CoreUtils.XROrigin) which is fully configured for mobile AR.\n- Added `SimulatedMeshClassification` and `SimulatedBoundedPlane` components to default environment prefab to support mesh and plane subsystems in simulation.\n- Added support for `ARBackgroundRenderer` in simulation.\n- Added public constructors for `XRTextureDescriptor` and `XRCameraFrame`.\n- Added point cloud visualization to the [ARDebugMenu](xref:arfoundation-debug-menu).\n- Added `SimulationPreferences` to user preferences in **Edit > Preferences > XR Simulation**.\n- Project wide simulation parameters can be modified in **Edit > Project Settings > XR Plug-in Management > XR Simulation**.\n\n### Changed\n\n- Moved menu item for refreshing the AR environment list from the AR Environment toolbar to the Assets menu.\n- `ARBackgroundRendererFeature` contains an abstract base class for custom render passes to use when defining an ARBackgroundRendererFeature custom pass and defines 2 custom render passes. A `BeforeOpaques` pass and an `AfterOpaques` pass.\n- Moved `UnitySubsystemsManifest.json` from Editor to Runtime since the integrated subsystems for simulation are in the Runtime assembly.\n- Removed `#if UNITY_EDITOR` guards from `ARBackgroundRendererFeature` so that the render feature can now be used in the editor.\n- Changed render settings in default simulation environment so that it uses trilight ambient mode and brighter ambient colors.\n- Updated simulation input subsystem to use `HandheldARInputDevice` instead of `XR HMD`.\n- The unused Post Processing settings field is now hidden in the inspector for `SimulationEnvironment`.\n\n### Deprecated\n\n- Deprecated the depth subsystem abstraction, `XRDepthSubsystem` and `XRDepthSubsystemDescriptor`, in favor of `XRPointCloudSubsystem` and `XRPointCloudSubsystemDescriptor` respectively. This is just a rename of the subsystem without any significant changes to the APIs. Unity's API Updater should automatically convert any deprecated depth subsystem API references to the point cloud subsystem APIs when the project is loaded into the Editor again. See [migration guide](xref:arfoundation-migration-guide-5-x) for more details.\n  - `XRDepthSubsystem` renamed to `XRPointCloudSubsystem`\n  - `XRDepthSubsystemDescriptor` renamed to `XRPointCloudSubsystemDescriptor`\n\n### Fixed\n\n- Fixed error loading AR Environment view icon on first domain load.\n- Fixed issue with simulated image tracking using the wrong vector for checking image direction.\n- Fixed a bug when the vertex count in `SimulationMeshSubsystem` could overflow beyond the limit of 16-bit indexing for large simulation environments. The index format now always uses 32-bit indexing to avoid the issue.\n- Fixed `MissingReferenceException` accessing camera when stopping simulation session subsystem.\n- Fixed error importing sample environments after downloading environments package through AR Environment toolbar.\n- Fixed navigation keys working in simulation even when right mouse button wasn't pressed.\n- Fixed an issue in simulation where the camera starts at the `XROrigin` instead of the simulation environment's specified starting pose.\n- Fixed [issue 960](https://github.com/Unity-Technologies/arfoundation-samples/issues/960) where `ARPointCloudManager.Append` could incorrectly throw an `ArgumentException`. For developers with custom implementations of `XRRaycastSubsystem.Provider` which do not support raycasting with an arbitrary ray, fallback raycasts including hits from point clouds will now correctly return all values.\n- Fixed [issue 963](https://github.com/Unity-Technologies/arfoundation-samples/issues/963) where `ARRaycastManager.RaycastFallback` would sometimes return incomplete results. Developers with custom implementations of `XRRaycastSubsystem.Provider` which do not support raycasting with an arbitrary ray will now see correct results from `ARRaycastManager.Raycast(Ray, TrackableType, Allocator)`.\n- Fixed graphics library error caused when binding a Unity texture object to a native texture object when their mipmap settings do not match.\n- Fixed an issue where recompiling scripts during Play Mode could cause memory leaks if `ARPlaneManager` or `ARPointCloudManager` were present in the scene. XR Simulation does not support script recompilation while playing, but now if a recompilation occurs in Play Mode, AR Foundation will not leak any memory."
  },
  "upmCi": {
    "footprint": "91ce45ee961a181663737deee31e763459bc2d31"
  },
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/arfoundation.git",
    "type": "git",
    "revision": "4577f2a07a8b076ccc52ae239e6b66396e9d05eb"
  }
}
